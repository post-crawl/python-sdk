"""
Auto-generated types from PostCrawl API.

DO NOT EDIT THIS FILE MANUALLY!
Re-generate with: cd sdks/typegen && python generate.py
"""

# generated by datamodel-codegen:
#   filename:  combined.schema.json
#   timestamp: 2025-07-07T12:35:05+00:00

from __future__ import annotations

from datetime import datetime
from typing import Annotated, Any, Literal

from pydantic import BaseModel, Field, RootModel


class Model(RootModel[Any]):
    root: Any

class ExtractInput(BaseModel):
    detailed: bool | None = None
    response_mode: Any
    sources: list[Any]
    urls: list[str]

class ExtractionInput(RootModel[list[str]]):
    root: list[str]

class ExtractorClient(BaseModel):
    pass

class PostURLRequest(BaseModel):
    detailed: bool | None = None
    urls: list[str]

class SearchInput(BaseModel):
    autocorrect: bool
    country: (
        Literal[
            'all',
            'f',
            'al',
            'dz',
            'as',
            'ad',
            'ao',
            'ai',
            'aq',
            'ag',
            'ar',
            'am',
            'aw',
            'au',
            'at',
            'az',
            'bs',
            'bh',
            'bd',
            'bb',
            'by',
            'be',
            'bz',
            'bj',
            'bm',
            'bt',
            'bo',
            'ba',
            'bw',
            'bv',
            'br',
            'io',
            'bn',
            'bg',
            'bf',
            'bi',
            'kh',
            'cm',
            'ca',
            'cv',
            'ky',
            'cf',
            'td',
            'cl',
            'cn',
            'cx',
            'cc',
            'co',
            'km',
            'cg',
            'cd',
            'ck',
            'cr',
            'ci',
            'hr',
            'cu',
            'cy',
            'cz',
            'dk',
            'dj',
            'dm',
            'do',
            'ec',
            'eg',
            'sv',
            'gq',
            'er',
            'ee',
            'et',
            'fk',
            'fo',
            'fj',
            'fi',
            'fr',
            'gf',
            'pf',
            'tf',
            'ga',
            'gm',
            'ge',
            'de',
            'gh',
            'gi',
            'gr',
            'gl',
            'gd',
            'gp',
            'gu',
            'gt',
            'gn',
            'gw',
            'gy',
            'ht',
            'hm',
            'va',
            'hn',
            'hk',
            'hu',
            'is',
            'in',
            'id',
            'ir',
            'iq',
            'ie',
            'il',
            'it',
            'jm',
            'jp',
            'jo',
            'kz',
            'ke',
            'ki',
            'kp',
            'kr',
            'kw',
            'kg',
            'la',
            'lv',
            'lb',
            'ls',
            'lr',
            'ly',
            'li',
            'lt',
            'lu',
            'mo',
            'mk',
            'mg',
            'mw',
            'my',
            'mv',
            'ml',
            'mt',
            'mh',
            'mq',
            'mr',
            'mu',
            'yt',
            'mx',
            'fm',
            'md',
            'mc',
            'mn',
            'ms',
            'ma',
            'mz',
            'mm',
            'na',
            'nr',
            'np',
            'nl',
            'an',
            'nc',
            'nz',
            'ni',
            'ne',
            'ng',
            'nu',
            'nf',
            'mp',
            'no',
            'om',
            'pk',
            'pw',
            'ps',
            'pa',
            'pg',
            'py',
            'pe',
            'ph',
            'pn',
            'pl',
            'pt',
            'pr',
            'qa',
            're',
            'ro',
            'ru',
            'rw',
            'sh',
            'kn',
            'lc',
            'pm',
            'vc',
            'ws',
            'sm',
            'st',
            'sa',
            'sn',
            'cs',
            'sc',
            'sl',
            'sg',
            'sk',
            'si',
            'sb',
            'so',
            'za',
            'gs',
            'es',
            'lk',
            'sd',
            'sr',
            'sj',
            'sz',
            'se',
            'ch',
            'sy',
            'tw',
            'tj',
            'tz',
            'th',
            'tl',
            'tg',
            'tk',
            'to',
            'tt',
            'tn',
            'tr',
            'tm',
            'tc',
            'tv',
            'ug',
            'ua',
            'ae',
            'uk',
            'us',
            'um',
            'uy',
            'uz',
            'vu',
            've',
            'vn',
            'vg',
            'vi',
            'wf',
            'eh',
            'ye',
            'zm',
            'zw',
        ]
        | None
    ) = None
    end_date: datetime | None = None
    language: (
        Literal[
            'ar-SA',
            'bn-BD',
            'bn-IN',
            'cs-CZ',
            'da-DK',
            'de-DE',
            'de-AT',
            'de-CH',
            'el-GR',
            'en-US',
            'en-AU',
            'en-CA',
            'en-GB',
            'en-IE',
            'en-IN',
            'en-NZ',
            'en-ZA',
            'fi-FI',
            'fr-FR',
            'fr-BE',
            'fr-CA',
            'fr-CH',
            'he-IL',
            'hi-IN',
            'hu-HU',
            'id-ID',
            'it-IT',
            'it-CH',
            'ja-JP',
            'ko-KR',
            'nl-NL',
            'nl-BE',
            'no-NO',
            'pl-PL',
            'pt-PT',
            'pt-BR',
            'ro-RO',
            'ru-RU',
            'sk-SK',
            'sv-SE',
            'ta-IN',
            'ta-LK',
            'th-TH',
            'tr-TR',
            'zh-CN',
            'zh-HK',
            'zh-TW',
        ]
        | None
    ) = None
    page: float
    query: str
    results: float
    social_platforms: list[Any]
    start_date: datetime | None = None

class CseImageItem(BaseModel):
    src: str

class Pagemap(BaseModel):
    cse_image: list[CseImageItem] | None = None

class Snippet(BaseModel):
    snippet: str

class DerivedStructData(BaseModel):
    formatted_url: Annotated[str | None, Field(alias='formattedUrl')] = None
    html_formatted_url: Annotated[str | None, Field(alias='htmlFormattedUrl')] = None
    link: str | None = None
    pagemap: Pagemap | None = None
    snippets: list[Snippet] | None = None
    title: str | None = None

class Document(BaseModel):
    derived_struct_data: Annotated[DerivedStructData | None, Field(alias='derivedStructData')] = (
        None
    )

class GoogleSearchItem(BaseModel):
    document: Document | None = None

class SearchResultOutput(BaseModel):
    date: str
    image_url: Annotated[str, Field(alias='imageUrl')]
    snippet: str
    title: str
    url: str

SearchService = ExtractorClient

class RedditComment(BaseModel):
    created_at: Annotated[datetime, Field(alias='createdAt')]
    downvotes: float
    id: str
    parent_id: Annotated[str, Field(alias='parentId')]
    permalink: str
    replies: list[RedditComment] | None = None
    score: float
    text: str
    upvotes: float

class RedditPost(BaseModel):
    comments: list[RedditComment] | None = None
    created_at: Annotated[datetime, Field(alias='createdAt')]
    description: str
    downvotes: float
    id: str
    name: str
    score: float
    subreddit_name: Annotated[str, Field(alias='subredditName')]
    title: str
    upvotes: float
    url: str

class RedditPostOutput(BaseModel):
    error: str
    markdown: None
    raw: RedditPost
    source: Literal['reddit']
    url: str

class TiktokReply(BaseModel):
    avatar_url: Annotated[str, Field(alias='avatarUrl')]
    created_at: Annotated[datetime, Field(alias='createdAt')]
    id: str
    likes: float
    nickname: str
    text: str
    username: str

class ExtractFormData(BaseModel):
    include_comments: bool | None = None
    request_type: Literal['extract'] = 'extract'
    response_mode: Literal['markdown', 'raw'] | None = None
    urls: str | None = None

class ExtractModel(BaseModel):
    include_comments: bool | None = None
    response_mode: Literal['markdown', 'raw'] | None = None
    urls: list[str] | None = None

ExtractRequest = ExtractModel

class SearchAndExtractFormData(BaseModel):
    include_comments: bool | None = None
    page: float | None = None
    query: str | None = None
    request_type: Literal['search-and-extract'] = 'search-and-extract'
    response_mode: Literal['markdown', 'raw'] | None = None
    results: float | None = None
    social_platforms: list[Literal['reddit', 'tiktok']] | None = None

class SearchAndExtractModel(BaseModel):
    include_comments: bool | None = None
    page: float | None = None
    query: str | None = None
    response_mode: Literal['markdown', 'raw'] | None = None
    results: float | None = None
    social_platforms: list[Literal['reddit', 'tiktok']] | None = None

SearchAndExtractRequest = SearchAndExtractModel

class SearchFormData(BaseModel):
    page: float | None = None
    query: str | None = None
    request_type: Literal['search'] = 'search'
    results: float | None = None
    social_platforms: list[Literal['reddit', 'tiktok']] | None = None

class SearchRequest(BaseModel):
    page: float | None = None
    query: str | None = None
    results: float | None = None
    social_platforms: list[Literal['reddit', 'tiktok']] | None = None

SearchAndExtractFormField = (
    SearchAndExtractFormData
)

SearchFormField = SearchFormData

class ExtractedPost(BaseModel):
    error: str | None = None
    markdown: str | None = None
    raw: str | None = None
    source: str | None = None
    url: str | None = None

class SocialPost(
    BaseModel
):
    author: str | None = None
    comments: float | None = None
    created_at: str | None = None
    id: str | None = None
    social_source: Literal['reddit', 'tiktok'] | None = None
    title: str | None = None
    upvotes: float | None = None
    url: str | None = None

ExtractFormField = ExtractFormData

class PostOutput(BaseModel):
    error: str
    markdown: str | None = None
    raw: dict[str, Any] | None = None
    source: Any
    url: str

class PostOutputT(BaseModel):
    error: str
    markdown: str | None = None
    raw: dict[str, Any] | None = None
    source: Any
    url: str

class PostsResponse(BaseModel):
    fails: float
    posts_responses: Annotated[list[PostOutputT], Field(alias='postsResponses')]
    requests: float
    time: float

class RedditExtractOutput(BaseModel):
    data: list[RedditPostOutput]
    error: str
    fails: float
    requests: float
    time: float

class TiktokComment(BaseModel):
    avatar_url: Annotated[str, Field(alias='avatarUrl')]
    created_at: Annotated[datetime, Field(alias='createdAt')]
    id: str
    likes: float
    nickname: str
    replies: list[TiktokReply]
    text: str
    username: str

class TiktokPost(BaseModel):
    field_has_error: Annotated[bool | None, Field(alias='_hasError')] = None
    comments: list[TiktokComment]
    created_at: Annotated[datetime, Field(alias='createdAt')]
    description: str
    detailed_description: Annotated[str | None, Field(alias='detailedDescription')] = None
    hashtags: list[str]
    id: str
    keywords: list[str] | None = None
    likes: str
    title: str | None = None
    total_comments: Annotated[float, Field(alias='totalComments')]
    url: str
    username: str

class TiktokPostOutput(BaseModel):
    error: str
    markdown: str | None = None
    raw: TiktokPost | None = None
    source: Literal['tiktok']
    url: str

class ExtractResponse(
    RootModel[list[ExtractedPost]]
):
    root: list[ExtractedPost]

class PlaygroundFormData(
    RootModel[
        ExtractFormField
        | SearchFormField
        | SearchAndExtractFormField
    ]
):
    root: (
        ExtractFormField
        | SearchFormField
        | SearchAndExtractFormField
    )

class SearchAndExtractResponse(ExtractResponse):
    pass

class SearchResponse(
    RootModel[
        list[
            SocialPost
        ]
    ]
):
    root: list[
        SocialPost
    ]

RedditComment.model_rebuild()
